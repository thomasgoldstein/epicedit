#region GPL statement
/*Epic Edit is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.*/
#endregion

using System;
using EpicEdit.Rom.Tracks.AI;
using NUnit.Framework;

namespace EpicEdit.Test.Rom.Tracks.AI
{
    [TestFixture]
    internal class TrackAITest
    {
        private void TestGetBytes(byte[] zoneData, byte[] targetData)
        {
            byte[] dataBefore = new byte[zoneData.Length + 1 + targetData.Length];
            Array.Copy(zoneData, dataBefore, zoneData.Length);
            dataBefore[zoneData.Length] = 0xFF; // Zone data ends with 0xFF
            Array.Copy(targetData, 0, dataBefore, zoneData.Length + 1, targetData.Length);

            TrackAI trackAI = new TrackAI(zoneData, targetData, null);

            byte[] dataAfter = trackAI.GetBytes();

            Assert.AreEqual(dataBefore, dataAfter);
        }

        [Test]
        public void TestGetBytes1()
        {
            byte[] zoneData =
            {
                0x00, 0x33, 0x1D, 0x0D, 0x06, 0x06, 0x3F, 0x1C,
                0x0D, 0x02, 0x33, 0x0F, 0x0D, 0x00, 0x2D, 0x0C,
                0x06, 0x0E, 0x00, 0x28, 0x0A, 0x05, 0x10, 0x00,
                0x24, 0x06, 0x04, 0x12, 0x00, 0x1D, 0x03, 0x07,
                0x14, 0x00, 0x15, 0x01, 0x08, 0x15, 0x00, 0x0E,
                0x00, 0x07, 0x13, 0x00, 0x0A, 0x00, 0x04, 0x0C,
                0x04, 0x09, 0x01, 0x0A, 0x08, 0x00, 0x0B, 0x0A,
                0x00, 0x00, 0x0C, 0x0B, 0x07, 0x00, 0x00, 0x13,
                0x0B, 0x09, 0x00, 0x00, 0x1C, 0x09, 0x09, 0x00,
                0x00, 0x25, 0x09, 0x05, 0x02, 0x00, 0x2A, 0x0B,
                0x06, 0x0B, 0x34, 0x0B, 0x00, 0x0C, 0x25, 0x06,
                0x11, 0x00, 0x12, 0x21, 0x07, 0x12, 0x00, 0x19,
                0x1F, 0x06, 0x15, 0x00, 0x1F, 0x20, 0x06, 0x17,
                0x00, 0x25, 0x23, 0x05, 0x1B, 0x00, 0x2A, 0x2C,
                0x05, 0x14, 0x00, 0x2F, 0x32, 0x05, 0x0E, 0x08,
                0x34, 0x3F, 0x0C, 0x04, 0x3F, 0x33, 0x0C, 0x00,
                0x34, 0x2D, 0x0C, 0x06, 0x00, 0x33, 0x28, 0x0D,
                0x05, 0x00, 0x33, 0x23, 0x0D, 0x05
            };

            byte[] targetData =
            {
                0x70, 0x35, 0x01, 0x68, 0x2D, 0x01, 0x60, 0x29,
                0x02, 0x57, 0x24, 0x03, 0x4A, 0x1E, 0x03, 0x3E,
                0x18, 0x03, 0x2F, 0x11, 0x02, 0x22, 0x0D, 0x01,
                0x17, 0x0C, 0x01, 0x10, 0x10, 0x00, 0x0C, 0x16,
                0x01, 0x0A, 0x1E, 0x02, 0x0A, 0x28, 0x02, 0x0A,
                0x39, 0x03, 0x0B, 0x4A, 0x01, 0x0F, 0x55, 0x00,
                0x14, 0x57, 0x00, 0x1E, 0x56, 0x01, 0x29, 0x51,
                0x02, 0x3A, 0x4C, 0x02, 0x45, 0x4F, 0x01, 0x4A,
                0x57, 0x01, 0x55, 0x68, 0x02, 0x60, 0x71, 0x02,
                0x69, 0x70, 0x03, 0x72, 0x6B, 0x03, 0x75, 0x63,
                0x02, 0x75, 0x55, 0x03, 0x75, 0x48, 0x03, 0x75,
                0x3D, 0x03
            };

            this.TestGetBytes(zoneData, targetData);
        }
    }
}
